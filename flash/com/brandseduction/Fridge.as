package com.brandseduction {  	import flash.display.MovieClip;  import flash.display.Stage;	import caurina.transitions.Tweener;	import flash.events.*;	import flash.net.*;	import flash.filters.*;		public class Fridge extends MovieClip {	    	var _id:Number;  	var _diameter:Number;    var _words;    var _magnets:Array = new Array();    // These will be the magnet area's boundary lines    var _padding = 40;    var _top_edge;    var _right_edge;    var _bottom_edge;    var _left_edge;  			function Fridge() {      this.addEventListener(MouseEvent.CLICK, onClick);      this.addEventListener(MouseEvent.ROLL_OVER, onRollOver);		}				public function init() {      trace ("fridge init");      			// Positioning			var x_target = stage.stageWidth - width - 30;			x = stage.stageWidth + 50;			Tweener.addTween(this, {x:x_target, time:1.5, delay:1.5, transition:"easeOutCubic"});			y = stage.stageHeight - height + 50;			drop_shadow();      			get_word_list();            // Sender      // Other stuff?		}				function x_span() {		  return _right_edge - _left_edge;		}				function y_span() {		  return _bottom_edge - _top_edge;		}				function drop_shadow() {      var color:Number = 0x000000;      var angle:Number = -90;      var alpha:Number = 1;      var blurX:Number = 20;      var blurY:Number = 20;      var distance:Number = 0;      var strength:Number = 0.75;      var inner:Boolean = false;      var knockout:Boolean = false;      var quality:Number = BitmapFilterQuality.HIGH;      var s:DropShadowFilter = new DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, quality, inner, knockout);      filters = [s];		}		function get_word_list() {			var url:String = "words.txt";			var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, completeHandler);			loader.load(new URLRequest(url));			function completeHandler(event:Event):void {				_words = (event.target.data as String).split("\n");				spawn_magnets();			}		}    function spawn_magnets() {	      // Define boundaries for magnets      _top_edge = _left_edge = _padding;      _right_edge = width - _padding*2;      _bottom_edge = height - _padding*2 - 100;	    	delay_i = 0;    	for (var i=0; i<_words.length; i++) {    		word = _words[i];        // trace(word);        var magnet:Magnet = new Magnet(i, word);        this.addChild(magnet);        magnet.init();        this._magnets.push(magnet)    	 }    }    						function onRollOver(event:MouseEvent):void {}		    function onClick(event:MouseEvent):void {}	}	}