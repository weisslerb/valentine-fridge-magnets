package com.brandseduction {  	import flash.display.*;	import caurina.transitions.Tweener;	import flash.events.*;	import flash.net.*;	import flash.filters.*;	import flash.text.*;		public class Fridge extends MovieClip {	  		var	_handle;    var _magnets:Array = new Array();    var _magnet_data:Object = new Object();    // These will be the magnet area's boundary lines    var _top_edge;    var _right_edge;    var _bottom_edge;    var _left_edge;  			function Fridge() {		}				public function init() {			// Positioning/scale			x = parent._scene_positions["main"] + stage.stageWidth + 50;			// Boolean stands for first_time_called			adapt_to_stage_scaling(true);			      // Define boundaries for magnets      _top_edge = 25			_left_edge = 33;      _right_edge = width - 34;      _bottom_edge = height - 40;						// Add handle      var handle:FridgeHandleArea = new FridgeHandleArea();      this.addChild(handle);      handle.init();			_handle = handle;			// Drop Shadow			drop_shadow();      			// Get words and spawn magnets			if (flashvars_are_present()) {				get_words_from_flashvars();			} else {				get_words_from_file();			}		}		function flashvars_are_present() {			var count:Number = 0;			var key:String			var flashvars:Object = LoaderInfo(this.root.loaderInfo).parameters;			for (key in flashvars) { count ++; }			trace ("flashvars count: " + count)			return (count > 0) ? true : false;		}		function message_exists() {			return (_magnet_data["words_x_init"]) ? true : false;		}		function get_words_from_flashvars() {	    var k:String;	    var v:String;	    var flashvars:Object = LoaderInfo(this.root.loaderInfo).parameters;				// Store flashvars data in Fridge's _magnet_data object			for (k in flashvars) {				v = flashvars[k]				v = v.replace("AND", "&");								// Is this a delimited string or just a name, email address, etc?				// determinant: string contains 7 or more underscores				if (v.split("_").length > 7) { v = v.split("_"); }								_magnet_data[k] = v;			}						spawn_magnets();		}				function get_words_from_file() {			var url:String = "words.txt";			var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, completeHandler);			loader.load(new URLRequest(url));			function completeHandler(event:Event):void {				_magnet_data["words"] = (event.target.data as String).split("\n");				spawn_magnets();			}		}		    function spawn_magnets() {			// For some reason grabbing an array from the object doesn't work,			// So it must be coerced into a string and split...			var words = String(_magnet_data["words"]).split(",")						if(message_exists()) {				var words_x_init = String(_magnet_data["words_x_init"]).split(",")				var words_y_init = String(_magnet_data["words_y_init"]).split(",")				var words_x = String(_magnet_data["words_x"]).split(",")				var words_y = String(_magnet_data["words_y"]).split(",")				var words_depth = String(_magnet_data["words_depth"]).split(",")			}			    	for (var i=0; i<words.length; i++) {    		var word = words[i];				// trace(word)        var magnet:Magnet = new Magnet(i, word);        this.addChild(magnet);				if(message_exists()) {					var x_init = words_x_init[i];					var y_init = words_y_init[i];					var x_target = words_x[i];					var y_target = words_y[i];					var depth = words_depth[i];					magnet.init(x_init, y_init, x_target, y_target, depth);				} else {        	magnet.init();									}       	_magnets.push(magnet)    	 }    }				public function x_span() {		  return _right_edge - _left_edge;		}				public function y_span() {		  return _bottom_edge - _top_edge;		}				function drop_shadow() {      var color:Number = 0x000000;      var angle:Number = -90;      var alpha:Number = 1;      var blurX:Number = 20;      var blurY:Number = 20;      var distance:Number = 0;      var strength:Number = 0.75;      var inner:Boolean = false;      var knockout:Boolean = false;      var quality:Number = BitmapFilterQuality.HIGH;      var s:DropShadowFilter = new DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, quality, inner, knockout);      filters = [s];		}		function save_magnet_data() {						var scriptRequest:URLRequest = new URLRequest("http://brandseduction.com/save_message.php");			var scriptLoader:URLLoader = new URLLoader();			var scriptVars:URLVariables = new URLVariables();			scriptLoader.addEventListener(Event.COMPLETE, handleLoadSuccessful);			scriptLoader.addEventListener(IOErrorEvent.IO_ERROR, handleLoadError);			var words:Array = new Array();			var words_x_init:Array = new Array();			var words_y_init:Array = new Array();			var words_x:Array = new Array();			var words_y:Array = new Array();			var words_depth:Array = new Array();						for(var i=0; i<_magnets.length; i++) {				var m = _magnets[i];				words.push(m._word);				words_x_init.push(m._x_init);				words_y_init.push(m._y_init);				words_x.push(m.x);				words_y.push(m.y);				words_depth.push(getChildIndex(m))			}						var sender = parent.getChildByName("sender")			scriptVars.sender_name = sender.getChildByName("sender_name").text;			scriptVars.sender_email = sender.getChildByName("sender_email").text;			scriptVars.recipient_name = sender.getChildByName("recipient_name").text;			scriptVars.recipient_email = sender.getChildByName("recipient_email").text;			scriptVars.words = words.join("_");			scriptVars.words_x_init = words_x_init.join("_");			scriptVars.words_y_init = words_y_init.join("_");			scriptVars.words_x = words_x.join("_");			scriptVars.words_y = words_y.join("_");			scriptVars.words_depth = words_depth.join("_");			scriptRequest.method = URLRequestMethod.POST;			scriptRequest.data = scriptVars;			scriptLoader.load(scriptRequest);			function handleLoadSuccessful(e:Event):void {				var msg_id:Number = Number(e.target.data);				trace("Message ID: " + msg_id);				sender.blow_away(msg_id);			}			function handleLoadError(e:IOErrorEvent):void {				trace("Message failed.");			}		}		public function adapt_to_stage_scaling(first_time_called:Boolean=false) {						var x_target = parent._scene_positions["main"] + stage.stageWidth - width - 30;			y = stage.stageHeight - height - 80;			if (first_time_called) {				Tweener.addTween(this, {x:x_target, time:1.5, delay:1.5, transition:"easeOutCubic", onComplete:tell_magnets_to_follow_destiny});			} else {				Tweener.addTween(this, {x:x_target, time:.25, delay:0, transition:"easeOutCubic"});			}		}				public function tell_magnets_to_follow_destiny() {			if (message_exists()) {				for (var i=0; i<_magnets.length; i++) {					m = _magnets[i];					m.move_to_target_spot();				}			}		}	}	}