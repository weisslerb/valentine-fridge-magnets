package {	import flash.display.MovieClip;	import caurina.transitions.Tweener;	import flash.events.MouseEvent;		public class Dot extends MovieClip {	    	private var _id:Number;  	private var _diameter:Number;  	private var _x_init:Number;  	private var _y_init:Number;  	private var _x_target:Number;  	private var _y_target:Number;  	private var _percentile:Number;  	private var _previous;  	private var _next;  	private var _num_seeds;  	private var _animation_type;  			function Dot(id:Number=0, init_x:Number=0, init_y:Number=0, x_target:Number=0, y_target:Number=0, num_seeds:Number=0) {						// Set variables			_animation_type = "spiral"			_id = id;			_x_target = x_target;			_y_target = y_target;			_x_init = x = init_x;			_y_init = y = init_y;			_diameter = 15 + distance_from_center_when_home() / 10;			_num_seeds = num_seeds			_percentile = _id / _num_seeds            // Draw shape      graphics.lineStyle(1, 0x83BF00);      graphics.beginFill(0x83BF00, .3);      var w = _diameter;      var h = _diameter/2 + _diameter*_percentile/2; // 50% of diameter + 0-50% depending on position      graphics.drawEllipse(-w/2,-h/2,w,h);      graphics.endFill();            rotation = angle_from_center_when_home()      /*      alpha = 0*/      scaleX = scaleY = .01            this.addEventListener(MouseEvent.CLICK, onClick);      this.addEventListener(MouseEvent.ROLL_OVER, onRollOver);		}				// This function is called by the parent container post-instantiation,		// as 'parent' is not available in the constructor function. Duh.		function init() {		  find_previous()		  if (_animation_type == "spiral") {		    if (_previous && !_previous._previous) { _previous.go_home_first_in_arm(); }		  } else {		    go_home();		  }		}				//		/********************************************************************************************************************/				// Animation Type 1: by Predecessor in Spiral Arm		function go_home_first_in_arm() {			var a = 1			var t = .1			var d = 1 + _id*.3;			var s = 1			Tweener.addTween(this, {alpha:a, time:t, delay:d, transition:"easeInCubic"});			Tweener.addTween(this, {scaleX:s, scaleY:s, x:_x_target, y:_y_target, time:t, delay:d, transition:"easeOutQuint", onStart:tell_next_to_go_home});		}				function go_home() {      var a = 1; var s = 1; var t = .4; var d = .03*_id;		  if (_animation_type == "spiral") {			  a = 1; s = 1; t = .25; d = .01;		  }			Tweener.addTween(this, {alpha:a, time:t, delay:d, transition:"easeInCubic"});			Tweener.addTween(this, {scaleX:s, scaleY:s, x:_x_target, y:_y_target, time:t, delay:d, transition:"easeOutCubic", onStart:tell_next_to_go_home});		}				function tell_next_to_go_home() {      if (_next && _animation_type == "spiral") { _next.go_home() }		}				// Animation Type 2: by Circumscription		// ... to be written		// 		/********************************************************************************************************************/				// Returns distance from parent clip's center		function distance_from_center(xPos:Number=0, yPos:Number=0) {		  if (xPos==0) { xPos = x }		  if (yPos==0) { xPos = y }		  return Math.ceil(Math.sqrt(xPos*xPos + yPos*yPos)); 		}		function distance_from_center_when_home() {		  return distance_from_center(_x_target, _y_target);		}		function angle_from_center(xPos:Number=0, yPos:Number=0) {		  if (xPos==0) { xPos = x }		  if (yPos==0) { xPos = y }		  return Math.atan(_y_target/_x_target) * 180/Math.PI;		}						function angle_from_center_when_home() {		  return angle_from_center(_x_target, _y_target)		}				function onRollOver(event:MouseEvent):void {}		    function onClick(event:MouseEvent):void {}				    function find_previous() {      // Find previous Dot in this dot's arc (or false if first in arc)      _previous = (_id >= 9) ? MovieClip(this.parent)._dots[_id-9] : false      // Now that we know the previous dot's next dot (this one) exists, we can call this:      if (_previous) { _previous.find_next() }		}				function find_next() {      // Find next Dot in this dot's arc (or false if last in arc)		  _next = (_id < _num_seeds-9) ? MovieClip(this.parent)._dots[_id+9] : false	  }	}	}